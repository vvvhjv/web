DAY5
如何实现三栏布局(左右两侧宽度固定，中间自适应）：
1.首先想到的应该是flex布局：给中间元素设置flex:1
2.float布局：
首先绘制左右两栏，左栏左浮动，右栏右浮动
再绘制中间一栏，留出左右两栏距离与间距(margin)
3.BFC布局
左右两栏元素浮动，中间元素设置overflow：hidden或display：flex达到中间栏自适应
4.定位
1.父元素使用相对定位
2.两侧子元素使用绝对定位
3.中间元素不做定位处理，只留出空间就好

flex容器上面有哪些属性：
一.flex-direction属性：决定主轴的的方向，即容器中项目排列的方向，一般默认的方向是横排列。
flex-direction有四个属性，它的属性值如下：
1、row（默认值）：主轴水平方向，起点在左端，
2、row-reverse：起点在右端，
3、column：主轴为垂直方向，起点在上沿，
4、column-reverse：起点在下沿。

二.flex-wrap属性： 设置子元素的换行方式
1、nowrap（默认值）：不换行 一直往后排（当父布局空间不足时，也不会换行此时可能就会有内容被遮挡看不见了）
2、wrap：换行，子元素往后排，当空间不足时会另起一行从新排列
3、wrap-reverse：换行，跟wrap相似 只是行会从下往上开始
三.flex-flow属性： 它是flex-direction属性和flex-wrap的简写。默认值（row nowrap）为横向排列不换行。
四.justify-content:  表示子元素在主轴方向上的对齐方式
1、flex-start（默认值）：左对齐
2、flex-end：右对齐
3、center：居中
4、space-between： 两端对齐
5、sp-ace-around：两端对齐但是项目边上的元素和容器之间有空隙
五.align-items属性： 表示子元素在交叉轴上的排列方式
1、flex-start：交叉轴的起点对齐
2、flex-end：终点对齐
3、center：中点对齐
4、baseline：项目的第一行文字基线对齐
5、stretch（默认值）：当项目未设置高度的时候，占满这个容器的高度
六.align-content属性： 它定义了多根轴线的对齐方式。当项目只有一根轴线的时候，该属性是不起作用的
1、flex-start：交叉轴的起点对齐，
2、flex-end：终点对齐，
3、center：中点对齐，
4、space-between：与交叉轴的两端对齐，轴线之间的间隔平均分布，
5、space-around：每根轴线两侧的间隔都相等，因此，轴线之间的间隔比轴线与边框的间隔大一倍，
6、strentch（默认值）：轴线占满整个交叉轴。

flex子元素上有哪些属性:
1.order属性： 定义项目的排列顺序。数值越小，排列越靠前，默认为0
2.flex-grow属性： 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大
3.flex-shrink属性： 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小
4.flex-basis属性： 属性定义了在分配多余空间之前，项目占据的主轴空间
5.flex属性： 是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto
6.align-self属性： align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch
JavaScript有哪些数据类型(基本数据类型：String,undefind,number,boolean,null,symbol,Bigint.
引用数据类型：Object

数据类型检测的方式有哪些：
typeof :只能准确检测：string、number、boolean、undefined、symbol、function，弊端是其他（object、array、date、regExp、null）都会返回object；
instanceof:本质作用是判断某个对象是由哪个类（构造函数）产生的，所以只能用在引用数据类型上，如果在原型上找到返回true，所以用它可以区分是引用类型还是基本类型数据；不能判断null,undefined
constructor: 不能判断null,undefined,其它的都可以，由于类的constructor可以随意更改，此时会存在判断不准确的问题
Object.prototype.toString.call()

判断数组的方式有哪些：
1.instanceof
2.constructor
3. Object.prototype.toString.call()
4. Array.isArray()

null和undefined的区别：
undefined: 表示变量声明过但并未赋过值。
null:表示空指针

为什么0.1 + 0.2 ！== 0.3：
在JS内部所有的计算都是以二进制方式计算的。 所以运算 0.1+ 0.2 时要先把 0.1和 0.2 从十进制转成二进制。

2、这里要注意 0.1 和 0.2 转成的二进制是无穷的。另外在现代浏览器中是用浮点数形式的二进制来存储二进制，所以还要把上面所转化的二进制转成浮点数形式的二进制。

3、0.1+0.2 不等于 0.3 ，因为在 0.1+0.2 的计算过程中发生了两次精度丢失。第一次是在 0.1 和 0.2 转成双精度二进制浮点数时，由于二进制浮点数的小数位只能存储52位，导致小数点后第53位的数要进行为1则进1为0则舍去的操作，从而造成一次精度丢失。第二次在 0.1 和 0.2 转成二进制浮点数后，二进制浮点数相加的过程中，小数位相加导致小数位多出了一位，又要让第53位的数进行为1则进1为0则舍去的操作，又造成一次精度丢失。最终导致 0.1+0.2 不等于0.3 。


其他值到布尔类型值的转换规则：

除了undefined null +0 -0 NaN false ""为假，其他均为真

其他值到字符串的转换规则：
1.toString()
2.String
3.用“+”进行数据类型转换

其他值到数字值的转换规则：
undefined 转换成数值类型 NaN
null 转换成数值类型 0
Boolean 转换成数字类型 0/1
字符串类型转换成数字类型 ： 如果传入的只含有数字的字符串，则直接转化为数字，如果包含其他非数字的字符串，则返回NaN.
Symbol类型转化为数字类型： 报错


&& 和 || 操作符的转换规则：
&& ：如果第一个值为true,则必然返回第二个值
          如果第一个值为false,则直接返回第一个值
|| ： 如果第一个值为true，则直接返回第一个值
        如果第一个值为false,则直接返回第二个值

比较操作符“===”和“==”的区别：
“==” 只比较值相等
“===” 不仅要求值相等，数据类型也要相等

伪数组：
伪数组就是不是真实的数组，无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以像遍历数组那样来遍历它们，所以叫伪数组。

伪数组转换成真数组：
方法一：最简单的，先准备一个新的空数组，然后遍历伪数组，将伪数组中的值通过索引逐个添加到新数组当中。



方法二：利用扩展运算符(...)将伪数组转化为真数组 - ES6语法

方法三：利用Array的原型对象的slice方法，配合call()方法修改slice中this指向（let arr = [].slice.call(divs);）

方法四：利用Array.from方法 - ES6


遍历数组的方法：

1.forEach: 遍历数组,把数组的每一项交给回调函数来处理,不能使用break和continue让他停下来,没有返回值
    let arr = [10,20,30,40,50];
    arr.forEach((item,index)=>{
           //item是数组遍历出来的一个个的项, index是项对应的下标
           console.log(item,index);
})2.map: 遍历数组不会停下来返回的是一个数组,数组的元素return回去的值.
let arr = [10,11,12,13,14,15];
let result = arr.map((item,index)=>{
    //item,index是遍历出来的每一项和对应的下标
    //console.log(item,index);

    //return 100;
    return item * 2;;
});
console.log(result);
3.filter: 遍历数组,不能使用break和continue停下来,有返回值.返回时一个数组, 数组的元素是当前为true的那一项
let arr = [10,11,44,33,22,56,31,21]
let result = arr.filter((item,index)=>{
    //item和index是遍历出来的每一项和对应的下标
    //console.log(item,index);
    return item >= 18;
});
console.log(result);
4.some: 判断数组中是否有符合条件的元素,如果有就返回true,没有就返回false
let arr = [10,20,30,40,50];
let res = arr.some((item,index)=>{
    return item > 400;
});
console.log(res);
5.every: 数组中的所有元素符合条件才返回true, 否则返回false
let arr = [10,20,30,40,50];
let res = arr.every((item,index)=>{
    return item > 0;
});
console.log(res);

对象的深拷贝，浅拷贝：


 浅拷贝是创建一个新对象， 这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存
地址，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。

深拷贝是将一个对象从内存中完整的拷贝份出来， 从堆内存中开辟一 个新的区域存放新对象，且修改新对象不会影响原对象。

json.stringify() 使用的注意事项：
（1）属性值为Infinity，NaN 的序列化后会变成了 null

（2）被序列化的对象的属性存在toJSON方法的，会被toJSON方法内返回的值覆盖
（3）如果被序列化的对象是数组，则数组内的undefined，Object，Symbol("")值会被转换为null
（4）如果被序列化的对象是对象，则对象内的属性值为undefined，Object，Symbol("")值的键值对会被直接筛除掉，不会出现在最终的结果中
（5）对象里面包含对象的在被序列化的时候会报错
（6）所有用symbol作为属性键的项会在序列化时直接被忽略
（7）不可枚举的属性值会在序列化时被直接忽略





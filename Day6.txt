JavaScript提升机制：
var关键字声明变量，它会被提升到当前作用域顶部
var关键字定义变量，只有两种作用域，函数作用域和全局作用域
变量可以重复声明

let关键字：
作用域是块级作用域
let关键字不能在同一作用域重新声明，var可以重新声明
存在暂时性死区

const关键字：
const关键字定义变量，作用域是块级作用域
const 可以定义常量
存在暂时性死区
const关键字不能在同一作用域重新声明


数组的拓展
    Array.from()方法：可以将以下两类对象转为数组
	* 
类似数组的对象（array-like-object）。
	* 
可遍历的对象（iterable-object）。


Array.of()：用于将一组值，转换为数组
没有参数的时候，返回一个空数组
当参数只有一个的时候，实际上是指定数组的长度
参数个数不少于 2 个时，Array()才会返回由参数组成的新数组

	* 
find() 方法：返回数组中满足指定条件的第一元素的值，未找到，则返回 undefined。
	* 
findIndex() 方法：返回数组中满足指定条件的第一元素的索引，未找到，则返回 -1。
	* 
fill() 方法：用一个固定值去填充数组中指定索引位置的数组值。
	* 
entries() 方法：返回一个新的 Array Iterator 对象，该对象包含数组中每个索引的键/值对。
	* 
keys() 方法：返回一个包含数组中每个索引键的 Array Iterator 对象。
	* 
values() 方法：返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值。



拓展运算符（...)

函数的拓展：
设置默认参数
rest参数： rest 参数又称为剩余参数，用于获取函数的多余参数。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。
箭头函数：解决了this的指向问题，使代码看上去更简洁， 使用剩余参数代替了 arguments 对象。   
                 不可以把它当作构造函数。不可以使用 arguments 对象。不可以用作 Generator 函数。
 name：
返回该函数的函数名
如果将一个具名函数赋值给一个变量，则 name属性都返回这个具名函数原本的名字
Function构造函数返回的函数实例，name属性的值为anonymous
bind返回的函数，name属性值会加上bound前缀

箭头函数与普通函数的区别:

	* 
箭头函数的 this 指向是其上下文的 this，没有方法可以改变其指向。
	* 
普通函数的 this 指向调用它的那个对象。
	* 
不可以把箭头函数当作构造函数。
	* 
不可以使用 arguments 对象。
	* 
不可以用作 Generator 函数。



字符串拓展：
模板字面量

	* 
includes()：判断是否包含指定字符串，如果包含返回 true，反之 false。
	* 
startsWith()：判断当前字符串是否以指定的子字符串开头，如果是则返回 true，反之 false。
	* 
endsWith()：判断当前字符串是否以指定的子字符串结尾，如果是则返回 true，反之 false。
	* 
repeat(n) 方法用于返回一个重复 n 次原字符串的新字符串，其参数 n 为整数，如果设置 n 为小数，会自动转换为整数。
	* 
 replaceAll() 方法，它可以用来替换所有匹配的字符串。


Set\Map的区别:
Set是以[值，值]的形式存储元素，Map是以[键，值]的形式存储
Map与Object的不同:
概念
Object

在ECMAScript中，Object是一个特殊的对象。它本身是一个顶级对象，同时还是一个构造函数，可以通过它（如：new Object()）来创建一个对象。我们可以认为JavaScript中所有的对象都是Object的一个实例，对象可以用字面量的方法const obj = {}即可声明。
Map

Map是Object的一个子类，可以有序保存任意类型的数据，使用键值对去存储，其中键可以存储任意类型，通过const m = new Map();即可得到一个map实例。
访问
map: 通过map.get(key)方法去属性, 不存在则返回undefined

object: 通过obj.a或者obj[‘a’]去访问一个属性, 不存在则返回undefined

赋值
map: 通过map.set去设置一个值，key可以是任意类型

object: 通过object.a = 1或者object[‘a’] = 1，去赋值，key只能是字符串，数字或symbol

删除
map: 通过map.delete去删除一个值，试图删除一个不存在的属性会返回false

object: 通过delete操作符才能删除对象的一个属性，诡异的是，即使对象不存在该属性，删除也返回true，当然可以通过Reflect.deleteProperty(target, prop) 删除不存在的属性还是会返回true。

var obj = {}; // undefined
delete obj.a // true
1
2
大小
map: 通过map.size即可快速获取到内部元素的总个数

object: 需要通过Object.keys的转换才能将其转换为数组，再通过数组的length方法去获得或者使用Reflect.ownKeys(obj)也可以获取到keys的集合

迭代
map: 拥有迭代器，可以通过for-of forEach去直接迭代元素，切遍历顺序是确定的

object: 并没有实现迭代器，需要自行实现，不实现只能通过for-in循环去迭代，遍历顺序是不确定的

使用场景
如果只需要简单的存储key-value的数据，并且key不需要存储复杂类型的，直接用对象
如果该对象必须通过JSON转换的，则只能用对象，目前暂不支持Map
map的阅读性更好，所有操作都是通过api形式去调用，更有编程体验

WeakMap\WeakSet:
WeakSet

1、WeakSet可以接受一个具有 Iterable接口的对象作为参数

2、在API中WeakSet与Set有两个区别：

没有遍历操作的API
没有size属性
3、WeackSet只能成员只能是引用类型，而不能是其他类型的值

4、WeakSet里面的引用只要在外部消失，它在 WeakSet里面的引用就会自动消失

五、WeakMap

1、WeakMap结构与Map结构类似，也是用于生成键值对的集合

2、在API中WeakMap与Map有两个区别：

没有遍历操作的API
没有clear清空方法
3、WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名

4、WeakMap的键名所指向的对象，一旦不再需要，里面的键名对象和所对应的键值对会自动消失，不用手动删除引用

对象新增拓展
一、属性的简写

1、ES6中，当对象键名与对应值名相等的时候，可以进行简写。方法也能够进行简写。在函数内作为返回值，也会变得方便很多：

注意：简写的对象方法不能用作构造函数，否则会报错
二、属性名表达式

1、ES6 允许字面量定义对象时，将表达式放在括号内。表达式还可以用于定义方法名：

注意，属性名表达式与简洁表示法，不能同时使用，会报错
注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object]
三、super关键字

this关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象
四、扩展运算符的应用

1、在解构赋值中，未被读取的可遍历的属性，分配到指定的对象上面：

注意：解构赋值必须是最后一个参数，否则会报错
2、解构赋值是浅拷贝。对象的扩展运算符等同于使用Object.assign()方法

五、属性的遍历

1、ES6 一共有 5 种方法可以遍历对象的属性：

for...in：循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）
Object.keys(obj)：返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名
Object.getOwnPropertyNames(obj)：回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名
Object.getOwnPropertySymbols(obj)：返回一个数组，包含对象自身的所有 Symbol 属性的键名
Reflect.ownKeys(obj)：返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举
2、上述遍历，都遵守同样的属性遍历的次序规则：

首先遍历所有数值键，按照数值升序排列
其次遍历所有字符串键，按照加入时间升序排列
最后遍历所有 Symbol 键，按照加入时间升序排
六、对象新增的方法

1、Object.is()：严格判断两个值是否相等，与严格比较运算符（===）的行为基本一致，不同之处只有两个：一是+0不等于-0，二是NaN等于自身

2、Object.assign()：

Object.assign()方法用于对象的合并，将源对象source的所有可枚举属性，复制到目标对象target
Object.assign()方法的第一个参数是目标对象，后面的参数都是源对象
注意：Object.assign()方法是浅拷贝，遇到同名属性会进行替换
3、Object.getOwnPropertyDescriptors()：返回指定对象所有自身属性（非继承属性）的描述对象

4、Object.setPrototypeOf()：用来设置一个对象的原型对象

5、Object.getPrototypeOf()：用于读取一个对象的原型对象

6、Object.keys()：返回自身的（不含继承的）所有可遍历（enumerable）属性的键名的数组

7、Object.values()：返回自身的（不含继承的）所有可遍历（enumerable）属性的键对应值的数组

8、Object.entries()：返回一个对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对的数组

9、Object.fromEntries()：用于将一个键值对数组转为对象

拓展运算符

解构赋值
对象的解构形式是在一个赋值操作符左边放置一个对象字面量，通俗来讲就是匹配相同的变量名与属性名来解构。